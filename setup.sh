#!/bin/bash
# ClubOS Setup Script
# This script sets up the ClubOS environment on Ubuntu/Debian systems

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root!"
        print_info "Run as a regular user with sudo privileges"
        exit 1
    fi
}

# Check OS
check_os() {
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        print_error "This script is designed for Linux systems"
        exit 1
    fi
}

# Main setup
main() {
    echo "üöÄ Starting ClubOS Setup..."
    echo "=========================="
    
    check_root
    check_os
    
    # 1. System Dependencies
    print_info "Installing system dependencies..."
    sudo apt update
    sudo apt install -y \
        python3.10 \
        python3-pip \
        python3-venv \
        postgresql \
        postgresql-contrib \
        nginx \
        git \
        curl \
        build-essential

    print_success "System dependencies installed"

    # 2. Create project directory
    print_info "Setting up project directory..."
    PROJECT_DIR="/opt/clubos"
    
    # Create directory with proper permissions
    sudo mkdir -p $PROJECT_DIR
    sudo chown $USER:$USER $PROJECT_DIR
    
    # Copy files if we're in development
    if [ -f "main.py" ]; then
        print_info "Copying project files..."
        cp -r . $PROJECT_DIR/
        cd $PROJECT_DIR
    else
        cd $PROJECT_DIR
    fi

    print_success "Project directory ready"

    # 3. Python Environment
    print_info "Creating Python virtual environment..."
    python3 -m venv venv
    source venv/bin/activate
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install Python dependencies
    if [ -f "requirements.txt" ]; then
        print_info "Installing Python dependencies..."
        pip install -r requirements.txt
        print_success "Python dependencies installed"
    else
        print_error "requirements.txt not found!"
        exit 1
    fi

    # 4. PostgreSQL Setup
    print_info "Setting up PostgreSQL database..."
    
    # Generate a secure password
    DB_PASSWORD=$(openssl rand -base64 32)
    
    # Create database and user
    sudo -u postgres psql << EOF
-- Create user if not exists
DO
\$do\$
BEGIN
   IF NOT EXISTS (
      SELECT FROM pg_catalog.pg_roles
      WHERE  rolname = 'clubos') THEN
      CREATE ROLE clubos LOGIN PASSWORD '$DB_PASSWORD';
   END IF;
END
\$do\$;

-- Create database if not exists
SELECT 'CREATE DATABASE clubos OWNER clubos'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'clubos')\gexec

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE clubos TO clubos;
EOF

    print_success "PostgreSQL database configured"

    # 5. Environment Configuration
    print_info "Setting up environment configuration..."
    
    # Create .env from example if it doesn't exist
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            # Update database URL with generated password
            sed -i "s|postgresql://clubos:password@localhost:5432/clubos|postgresql://clubos:$DB_PASSWORD@localhost:5432/clubos|" .env
            print_info "Created .env file - Please add your OpenAI API key"
        else
            # Create .env from scratch
            cat > .env << EOF
# ClubOS Environment Configuration
# Generated by setup script on $(date)

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-key-here

# Database Configuration
DATABASE_URL=postgresql://clubos:$DB_PASSWORD@localhost:5432/clubos

# Application Settings
APP_ENV=production
DEBUG=False
EOF
            print_info "Created .env file - Please add your OpenAI API key"
        fi
    else
        print_info ".env file already exists - skipping"
    fi

    # 6. Create systemd service
    print_info "Creating systemd service..."
    
    sudo tee /etc/systemd/system/clubos.service > /dev/null << EOF
[Unit]
Description=ClubOS Backend Service
After=network.target postgresql.service
Requires=postgresql.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$PROJECT_DIR
Environment="PATH=$PROJECT_DIR/venv/bin"
ExecStart=$PROJECT_DIR/venv/bin/python main.py
Restart=always
RestartSec=10
StandardOutput=append:/var/log/clubos/clubos.log
StandardError=append:/var/log/clubos/clubos.error.log

[Install]
WantedBy=multi-user.target
EOF

    # Create log directory
    sudo mkdir -p /var/log/clubos
    sudo chown $USER:$USER /var/log/clubos

    # Enable but don't start the service yet
    sudo systemctl daemon-reload
    sudo systemctl enable clubos

    print_success "Systemd service created"

    # 7. Nginx Configuration
    print_info "Configuring Nginx..."
    
    # Create web directory
    sudo mkdir -p /var/www/clubos
    sudo chown $USER:$USER /var/www/clubos
    
    # Copy frontend files if they exist
    if [ -f "index.html" ]; then
        cp index.html /var/www/clubos/
        print_success "Frontend files copied"
    fi
    
    # Create Nginx config
    sudo tee /etc/nginx/sites-available/clubos > /dev/null << 'EOF'
server {
    listen 80;
    server_name localhost;  # Change to your domain
    
    # Frontend
    location / {
        root /var/www/clubos;
        try_files $uri $uri/ /index.html;
    }
    
    # API proxy
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # WebSocket support
    location /ws {
        proxy_pass http://localhost:8000/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
EOF

    # Enable the site
    sudo ln -sf /etc/nginx/sites-available/clubos /etc/nginx/sites-enabled/
    sudo nginx -t
    sudo systemctl restart nginx

    print_success "Nginx configured"

    # 8. Initialize Database
    print_info "Initializing database tables..."
    
    # Run a Python script to create tables
    python3 << EOF
import sys
sys.path.insert(0, '$PROJECT_DIR')
from database import Base, engine
print("Creating database tables...")
Base.metadata.create_all(bind=engine)
print("Database tables created successfully!")
EOF

    print_success "Database initialized"

    # 9. Create helper scripts
    print_info "Creating helper scripts..."
    
    # Start script
    cat > start_clubos.sh << 'EOF'
#!/bin/bash
sudo systemctl start clubos
sudo systemctl start nginx
echo "ClubOS started!"
echo "Frontend: http://localhost"
echo "API: http://localhost/api"
EOF
    chmod +x start_clubos.sh
    
    # Stop script
    cat > stop_clubos.sh << 'EOF'
#!/bin/bash
sudo systemctl stop clubos
echo "ClubOS stopped!"
EOF
    chmod +x stop_clubos.sh
    
    # Logs script
    cat > logs_clubos.sh << 'EOF'
#!/bin/bash
echo "=== ClubOS Logs ==="
sudo journalctl -u clubos -f
EOF
    chmod +x logs_clubos.sh

    print_success "Helper scripts created"

    # 10. Final Instructions
    echo ""
    echo "======================================"
    echo "üéâ ClubOS Setup Complete!"
    echo "======================================"
    echo ""
    echo "üìã Next Steps:"
    echo "1. Edit .env and add your OpenAI API key"
    echo "2. Update phone numbers in knowledge_base.py"
    echo "3. Update API_BASE in /var/www/clubos/index.html"
    echo ""
    echo "üöÄ To start ClubOS:"
    echo "   ./start_clubos.sh"
    echo ""
    echo "üõë To stop ClubOS:"
    echo "   ./stop_clubos.sh"
    echo ""
    echo "üìä To view logs:"
    echo "   ./logs_clubos.sh"
    echo ""
    echo "üåê Access Points:"
    echo "   Frontend: http://localhost"
    echo "   API: http://localhost/api"
    echo ""
    echo "üíæ Database Credentials saved in .env"
    echo ""
    
    # Check for missing configuration
    if grep -q "sk-your-openai-key-here" .env; then
        print_error "‚ö†Ô∏è  Don't forget to add your OpenAI API key to .env!"
    fi
    
    if grep -q "XXX-XXXX" knowledge_base.py 2>/dev/null; then
        print_error "‚ö†Ô∏è  Don't forget to update phone numbers in knowledge_base.py!"
    fi
}

# Run main function
main