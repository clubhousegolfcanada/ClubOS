#!/bin/bash
# ClubOS Complete Setup Script - Fixed Version
# This script sets up ClubOS with proper file organization

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${YELLOW}ℹ️  $1${NC}"
}

print_step() {
    echo -e "${BLUE}🔧 $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root!"
        print_info "Run as a regular user with sudo privileges"
        exit 1
    fi
}

# Check OS
check_os() {
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        print_error "This script is designed for Linux systems"
        exit 1
    fi
}

# Main setup
main() {
    echo "🚀 Starting ClubOS Fixed Setup..."
    echo "=================================="
    
    check_root
    check_os
    
    # 0. File Organization
    print_step "Organizing project files..."
    
    # Create directories
    mkdir -p backend frontend scripts logs
    
    # Move files to correct locations (if they exist in wrong places)
    for file in main.py engine_foundation.py database.py schemas.py knowledge_base.py health.py bootstrap.py; do
        if [ -f "$file" ] && [ ! -f "backend/$file" ]; then
            mv "$file" backend/
            print_info "Moved $file to backend/"
        fi
    done
    
    if [ -f "index.html" ] && [ ! -f "frontend/index.html" ]; then
        mv index.html frontend/
        print_info "Moved index.html to frontend/"
    fi
    
    # Copy requirements.txt to backend if needed
    if [ -f "requirements.txt" ] && [ ! -f "backend/requirements.txt" ]; then
        cp requirements.txt backend/
    fi
    
    # Create __init__.py for Python package
    touch backend/__init__.py
    
    print_success "File organization complete"

    # 1. System Dependencies
    print_step "Installing system dependencies..."
    sudo apt update
    sudo apt install -y \
        python3.10 \
        python3-pip \
        python3-venv \
        postgresql \
        postgresql-contrib \
        nginx \
        git \
        curl \
        build-essential

    print_success "System dependencies installed"

    # 2. Python Environment
    print_step "Creating Python virtual environment..."
    
    if [ ! -d "venv" ]; then
        python3 -m venv venv
    fi
    
    source venv/bin/activate
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install Python dependencies
    if [ -f "backend/requirements.txt" ]; then
        print_info "Installing Python dependencies..."
        pip install -r backend/requirements.txt
        print_success "Python dependencies installed"
    else
        print_error "backend/requirements.txt not found!"
        exit 1
    fi

    # 3. Environment Configuration
    print_step "Setting up environment configuration..."
    
    # Create .env from example if it doesn't exist
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_info "Created .env file from example"
        else
            # Create .env from scratch
            cat > .env << EOF
# ClubOS Environment Configuration
# Generated by setup script on $(date)

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-key-here

# Database Configuration
DATABASE_URL=postgresql://clubos:password@localhost:5432/clubos

# Email Configuration
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-16-char-app-password
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
FROM_EMAIL=clubos@yourclubhouse.com

# Application Settings
APP_ENV=production
DEBUG=False
EOF
            print_info "Created default .env file"
        fi
    else
        print_info ".env file already exists - skipping"
    fi

    # 4. PostgreSQL Setup
    print_step "Setting up PostgreSQL database..."
    
    # Generate a secure password
    DB_PASSWORD=$(openssl rand -base64 32)
    
    # Create database and user
    sudo -u postgres psql << EOF
-- Create user if not exists
DO
\$do\$
BEGIN
   IF NOT EXISTS (
      SELECT FROM pg_catalog.pg_roles
      WHERE  rolname = 'clubos') THEN
      CREATE ROLE clubos LOGIN PASSWORD '$DB_PASSWORD';
   END IF;
END
\$do\$;

-- Create database if not exists
SELECT 'CREATE DATABASE clubos OWNER clubos'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'clubos')\gexec

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE clubos TO clubos;
EOF

    # Update .env with generated password
    sed -i "s|postgresql://clubos:password@localhost:5432/clubos|postgresql://clubos:$DB_PASSWORD@localhost:5432/clubos|" .env

    print_success "PostgreSQL database configured"

    # 5. Initialize Database Tables
    print_step "Initializing database tables..."
    
    cd backend
    python3 << EOF
import sys
sys.path.insert(0, '.')
try:
    from database import init_database
    init_database()
    print("Database initialization completed successfully!")
except Exception as e:
    print(f"Database initialization error: {e}")
    exit(1)
EOF
    cd ..

    print_success "Database tables initialized"

    # 6. Create systemd service
    print_step "Creating systemd service..."
    
    sudo tee /etc/systemd/system/clubos.service > /dev/null << EOF
[Unit]
Description=ClubOS Backend Service
After=network.target postgresql.service
Requires=postgresql.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$PWD/backend
Environment="PATH=$PWD/venv/bin"
ExecStart=$PWD/venv/bin/python main.py
Restart=always
RestartSec=10
StandardOutput=append:/var/log/clubos/clubos.log
StandardError=append:/var/log/clubos/clubos.error.log

[Install]
WantedBy=multi-user.target
EOF

    # Create log directory
    sudo mkdir -p /var/log/clubos
    sudo chown $USER:$USER /var/log/clubos

    # Enable but don't start the service yet
    sudo systemctl daemon-reload
    sudo systemctl enable clubos

    print_success "Systemd service created"

    # 7. Nginx Configuration
    print_step "Configuring Nginx..."
    
    # Create web directory
    sudo mkdir -p /var/www/clubos
    sudo chown $USER:$USER /var/www/clubos
    
    # Copy frontend files
    if [ -f "frontend/index.html" ]; then
        cp frontend/index.html /var/www/clubos/
        print_success "Frontend files copied"
    fi
    
    # Create Nginx config
    sudo tee /etc/nginx/sites-available/clubos > /dev/null << 'EOF'
server {
    listen 80;
    server_name localhost;  # Change to your domain
    
    # Frontend
    location / {
        root /var/www/clubos;
        try_files $uri $uri/ /index.html;
    }
    
    # API proxy
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # WebSocket support
    location /ws {
        proxy_pass http://localhost:8000/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
EOF

    # Enable the site
    sudo ln -sf /etc/nginx/sites-available/clubos /etc/nginx/sites-enabled/
    
    # Test nginx config
    if sudo nginx -t; then
        sudo systemctl restart nginx
        print_success "Nginx configured"
    else
        print_error "Nginx configuration failed"
    fi

    # 8. Create helper scripts
    print_step "Creating helper scripts..."
    
    # Start script
    cat > start_clubos.sh << 'EOF'
#!/bin/bash
echo "🚀 Starting ClubOS..."
sudo systemctl start clubos
sudo systemctl start nginx
sleep 3

if sudo systemctl is-active --quiet clubos; then
    echo "✅ ClubOS backend started successfully"
else
    echo "❌ ClubOS backend failed to start"
    echo "Check logs with: sudo journalctl -u clubos -f"
    exit 1
fi

if sudo systemctl is-active --quiet nginx; then
    echo "✅ Nginx started successfully"
else
    echo "❌ Nginx failed to start"
fi

echo ""
echo "🌐 ClubOS is now running!"
echo "Frontend: http://localhost"
echo "API: http://localhost/api"
echo "Health: http://localhost/api/health"
EOF
    chmod +x start_clubos.sh
    
    # Stop script
    cat > stop_clubos.sh << 'EOF'
#!/bin/bash
echo "🛑 Stopping ClubOS..."
sudo systemctl stop clubos
echo "ClubOS stopped!"
EOF
    chmod +x stop_clubos.sh
    
    # Logs script
    cat > logs_clubos.sh << 'EOF'
#!/bin/bash
echo "=== ClubOS Logs ==="
echo "Use Ctrl+C to exit"
echo ""
sudo journalctl -u clubos -f
EOF
    chmod +x logs_clubos.sh

    # Development start script
    cat > dev_start.sh << 'EOF'
#!/bin/bash
echo "🔧 Starting ClubOS in development mode..."

# Activate virtual environment
source venv/bin/activate

# Start backend in development mode
echo "Starting backend..."
cd backend
python main.py &
BACKEND_PID=$!
cd ..

# Wait for backend to start
sleep 3

# Start frontend
echo "Starting frontend..."
cd frontend
python3 -m http.server 3000 &
FRONTEND_PID=$!
cd ..

echo ""
echo "🎉 ClubOS Development Server Started!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🌐 Frontend: http://localhost:3000"
echo "🔌 API:      http://localhost:8000"
echo "📊 Health:   http://localhost:8000/health"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "To stop: kill $BACKEND_PID $FRONTEND_PID"
echo "Or use Ctrl+C and run: killall python3"

# Wait for interrupt
trap "kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; exit" INT
wait
EOF
    chmod +x dev_start.sh

    print_success "Helper scripts created"

    # 9. Test Configuration
    print_step "Testing configuration..."
    
    # Test database connection
    cd backend
    if python3 -c "from database import SessionLocal; db = SessionLocal(); db.execute('SELECT 1'); db.close(); print('Database connection: OK')" 2>/dev/null; then
        print_success "Database connection test passed"
    else
        print_error "Database connection test failed"
    fi
    cd ..

    # 10. Final Instructions
    echo ""
    echo "======================================"
    echo "🎉 ClubOS Setup Complete!"
    echo "======================================"
    echo ""
    echo "📋 Configuration Summary:"
    echo "  ✅ File structure organized"
    echo "  ✅ Database created and initialized"
    echo "  ✅ Systemd service configured"
    echo "  ✅ Nginx reverse proxy set up"
    echo "  ✅ Helper scripts created"
    echo ""
    echo "⚠️  REQUIRED: Manual Configuration Steps"
    echo "1. Edit .env and add your OpenAI API key:"
    echo "   nano .env"
    echo ""
    echo "2. Update contact phone numbers in backend/knowledge_base.py:"
    echo "   nano backend/knowledge_base.py"
    echo ""
    echo "3. Update contact assignments in backend/ticket_system.py:"
    echo "   nano backend/ticket_system.py"
    echo ""
    echo "🚀 Start ClubOS:"
    echo "   ./start_clubos.sh           # Production mode"
    echo "   ./dev_start.sh              # Development mode"
    echo ""
    echo "🛑 Stop ClubOS:"
    echo "   ./stop_clubos.sh"
    echo ""
    echo "📊 View logs:"
    echo "   ./logs_clubos.sh"
    echo ""
    echo "🌐 Access Points:"
    echo "   Frontend: http://localhost"
    echo "   API: http://localhost/api"
    echo "   Health: http://localhost/api/health"
    echo ""
    echo "🔧 Development Access:"
    echo "   Frontend: http://localhost:3000"
    echo "   API: http://localhost:8000"
    echo ""
    
    # Check for missing configuration
    if grep -q "sk-your-openai-key-here" .env; then
        print_error "⚠️  Don't forget to add your OpenAI API key to .env!"
    fi
    
    if grep -q "XXX-XXXX" backend/knowledge_base.py 2>/dev/null; then
        print_error "⚠️  Don't forget to update phone numbers in backend/knowledge_base.py!"
    fi

    echo ""
    echo "📚 Next Steps:"
    echo "1. Configure your API keys and contact info"
    echo "2. Test the system with ./dev_start.sh"
    echo "3. Create test tickets and verify email notifications"
    echo "4. Deploy to production with ./start_clubos.sh"
}

# Run main function
main
